diff --git a/periph/gx3.h b/periph/gx3.h
new file mode 100644
index 0000000..fdbc47a
--- /dev/null
+++ b/periph/gx3.h
@@ -0,0 +1,81 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * gx3.h
+ *
+ *  Created on: Nov 26, 2013
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+#ifndef GX3_H_
+#define GX3_H_
+
+#include <stdbool.h>
+#include "GX3/gx3_.h"
+#include "GX3/gx3_msg.h"
+
+#define EOS (-1)
+
+
+//TODO use parameter.h
+
+// Constante de gravité du GX3
+#define PHYSICS_GX3 9.80665f
+
+void	GX3_init();
+int8_t	GX3_get_message_length(const uint8_t id);
+void	GX3_process_complete_message(const uint8_t id);
+//void	GX3_decode_uart_rx(void);
+void 	GX3_write_bias();
+void	GX3_send_request(uint8_t const *request, uint8_t size);
+
+
+/** TASKS **/
+void	imu_decode_periodical(void *arg);
+void	GX3_periodical(void *arg);
+
+
+typedef struct{
+
+	float roll;
+	float pitch;
+	float yaw;
+
+	float dot_roll;
+	float dot_pitch;
+	float dot_yaw;
+
+	float accel_x;
+	float accel_y;
+	float accel_z;
+
+	float gyro_bias_x;
+	float gyro_bias_y;
+	float gyro_bias_z;
+
+	float accel_bias_x;
+	float accel_bias_y;
+	float accel_bias_z;
+
+	bool imu_alive;
+
+	bool okToFly;
+
+}imu_t;
+
+
+/* GX3 "Datastore" */
+imu_t drone_gx3;
+
+
+#endif /* GX3_H_ */
diff --git a/periph/gx3/SCP/endianess.h b/periph/gx3/SCP/endianess.h
new file mode 100644
index 0000000..ad3b6a3
--- /dev/null
+++ b/periph/gx3/SCP/endianess.h
@@ -0,0 +1,93 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * endianess.h
+ *
+ *  Created on: Jan 18, 2014
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+#ifndef ENDIANESS_H_
+#define ENDIANESS_H_
+
+#include <stdint.h>
+#include "debug.h"
+
+
+#ifdef __AVR__
+#define LITTLE_ENDIAN
+#elif __AVR32__
+#define BIG_ENDIAN
+#else
+#define LITTLE_ENDIAN
+#endif
+
+/*! @class Endianess
+    @brief Classe qui gere le endianness lors des echanges de message
+
+	Le endianess est la maniere dont la machine enregistre les donnes de plus d'un byte en memoire. Voir http://en.wikipedia.org/wiki/Endianness. \n\r
+
+	Par convention toute communication par Dronolab est effectue en BIG ENDIAN. Le receveur/recepteur doit convertir les donnees du message dans le bon format. \n\r
+
+	<B> Le systeme est en BIG ENDIAN <\B>
+*/
+
+inline void flip_endianess(void *source, int size)
+{
+
+    uint8_t *buffer[size];
+    *buffer = (uint8_t *)source;
+
+    uint8_t temp;
+
+    /* if 16 bits */
+    if(size == 2)
+    {
+        temp = (*buffer)[0];
+        (*buffer)[0] = (*buffer)[1];
+        (*buffer)[1] = temp;
+        return;
+    }
+
+    /* if 32 bits */
+    if(size==4)
+    {
+    	temp  = (*buffer)[0];
+    	(*buffer)[0] = (*buffer)[3];
+    	(*buffer)[3] = temp;
+
+    	temp = (*buffer)[1];
+        (*buffer)[1] = (*buffer)[2];
+        (*buffer)[2] = temp;
+
+    	return;
+    }
+}
+
+#if defined(LITTLE_ENDIAN) && !defined(BIG_ENDIAN)
+	#define host2littleendian(x) (x)
+	#define littleendian2host(x) (x)
+	#define host2bigendian(x) flip_endianess(x, sizeof(*x))
+	#define bigendian2host(x) flip_endianess(x, sizeof(*x))
+#elif !defined(LITTLE_ENDIAN) && defined(BIG_ENDIAN)
+	#define host2littleendian(x) flip_endianess(x, sizeof(*x))
+	#define littleendian2host(x) flip_endianess(x, sizeof(*x))
+	#define host2bigendian(x) (x)
+	#define bigendian2host(x) (x)
+#else
+	#error "Endianess not defined !"
+#endif
+
+
+
+#endif /* ENDIANESS_H_ */
diff --git a/periph/gx3/SCP/scp_parser.c b/periph/gx3/SCP/scp_parser.c
new file mode 100644
index 0000000..3fc18a3
--- /dev/null
+++ b/periph/gx3/SCP/scp_parser.c
@@ -0,0 +1,186 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * scp_parser.c
+ *
+ *  Created on: Jan 20, 2014
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+
+#include "./scp_parser.h"
+#include "../../gx3.h"
+#include "util.h"
+
+#include "debug.h"
+
+
+//#define DEBUG_FLAG_DRIVER_SCP_PARSER
+//#define PRINT_AFTER_CHKSUM
+
+#ifdef DEBUG_FLAG_DRIVER_SCP_PARSER
+#define scp_print_dbg(x...)   log_debug(x)
+#define UNUSED
+#else
+#define scp_print_dbg(x...)   do { } while(0)
+#define UNUSED      __attribute__((unused))
+#endif
+
+
+/** Taille du buffer de reception */
+#define SCP_BUFF_SIZE (127 + 1 + 2)
+
+/** Tampon de réception/décodage **/
+uint8_t buff[SCP_BUFF_SIZE];
+uint8_t buff_count;
+
+/** Identifiant en cours de traitement **/
+uint8_t id;
+
+int8_t bytes_to_read;
+
+//Monitoring fct
+uint32_t sum_time_receiving_us;
+
+
+void SCP_reset(){
+	buff_count		= 0;
+	id 				= 0;
+	state 			= LOOKING_FOR_KNOWN_MESSAGE_ID;
+	bytes_to_read 	= 0;
+}
+
+
+inline int SCP_get(void* dst, int len) {
+	memcpy(dst, buff + 1, len);
+	return len;
+}
+
+void SCP_init(){
+	sum_time_receiving_us = 0;
+	SCP_reset();
+}
+
+uint8_t SCP_decode(const char c) {
+	switch (state) {
+		case LOOKING_FOR_KNOWN_MESSAGE_ID: {
+			// is the received char known ?
+			bytes_to_read = GX3_get_message_length(c);
+			if (bytes_to_read != UNKNOWN_MESSAGE_ID) {
+				bytes_to_read += 1 + 2; // id and checksum size
+				// it is a known message
+				id = c;
+				state = RECEIVING_KNOWN_MESSAGE;
+				buff[buff_count++] = c;
+			} else {
+				// unknown message, nothing left to do
+				return SCPPARSER_ERROR;
+			}
+			break;
+		}
+		case RECEIVING_KNOWN_MESSAGE: {
+			buff[buff_count++] = c;
+			break;
+		}
+	}
+
+
+	return SCP_handle_completed_message();
+}
+
+uint8_t SCP_handle_completed_message() {
+	uint8_t ret = SCPPARSER_OK;
+
+	scp_print_dbg("st: %d  bc: %d btr: %d\n",  state, buff_count, bytes_to_read);
+
+	if (state == RECEIVING_KNOWN_MESSAGE && buff_count >= bytes_to_read) {
+		// a complete message is ready to be validated.
+
+		// calculate received checksum (sum up received bytes)
+//		uint16_t calculatedChkSum = crc16(0x0000, buff, bytes_to_read - 2);
+		uint16_t calculatedChkSum = 0, i;
+		for(i=0; i<bytes_to_read-2; i++){
+			calculatedChkSum += buff[i];
+		}
+
+		// get message checksum field
+		uint16_t buffChkSum = buff[bytes_to_read - 2] << 8 | buff[bytes_to_read - 1];
+
+		uint8_t buffer_cursor_pos;
+
+		if (buffChkSum == calculatedChkSum) {
+			// valid checksum
+
+#ifdef PRINT_AFTER_CHKSUM
+			printf("scp buffer ");
+			int a=0;
+			for(a=0; a<28; a++){
+				printf("[0x%02x] ", buff[a]);
+			}
+			printf("\n");
+#endif
+
+			// process message
+			GX3_process_complete_message(id);
+
+			buffer_cursor_pos = bytes_to_read;
+		} else {
+
+			// invalid checksum
+			ret = SCPPARSER_ERROR;
+
+			buffer_cursor_pos = 1; // skip first byte, we just found out it is invalid
+		}
+
+		if (buffer_cursor_pos < buff_count) {
+			// try to find a valid message in remaining buffer bytes (starting from buffer_cursor_pos)
+			do {
+				bytes_to_read = GX3_get_message_length(buff[buffer_cursor_pos]);
+				if (bytes_to_read != UNKNOWN_MESSAGE_ID) {
+					bytes_to_read += 1 + 2; // id and checksum size
+
+					// it is a known message
+					id = buff[buffer_cursor_pos];
+
+					// move remaining byte to the begining of the buffer
+					buff_count -= buffer_cursor_pos;
+					memmove(buff, buff + buffer_cursor_pos, buff_count);
+
+					// stop now so only one message checksum is calculated by function call
+					return ret;
+				} else {
+					// unknown message. check next byte
+					buffer_cursor_pos++;
+				}
+			} while (buffer_cursor_pos < buff_count);
+
+			// no valid message found in remaining bytes
+			ret = SCPPARSER_ERROR;
+		}
+
+		// nothing left in buffer
+		// reset incomming buffer
+		buff_count = 0;
+		state = LOOKING_FOR_KNOWN_MESSAGE_ID;
+	}
+
+	return ret;
+}
+
+inline uint32_t SCP_sum_time_receiving()
+{
+	uint32_t temp = sum_time_receiving_us;
+	sum_time_receiving_us = 0;
+
+	return temp;
+}
diff --git a/periph/gx3/SCP/scp_parser.h b/periph/gx3/SCP/scp_parser.h
new file mode 100644
index 0000000..d6bb585
--- /dev/null
+++ b/periph/gx3/SCP/scp_parser.h
@@ -0,0 +1,90 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * scp_parser.h
+ *
+ *  Created on: Jan 20, 2014
+ *      Author: liam 		<liambeguin.at.gmail.com>
+ *      Author: Frederic 	<frederic.morin.8@gmail.com>
+ */
+
+#ifndef SCP_PARSER_H_
+#define SCP_PARSER_H_
+
+
+#include <stdint.h>
+#include <string.h>
+
+/*! @class SCPParser
+	@ingroup SCPProtocol
+    @brief Classe qui gere la reception de message via le protocole SSPProtocol.
+
+	L'algorithme recherche dans un buffer de byte un ID valide. A partir de l'ID valide, l'algorithme connait le nombre de byte a traite.
+	Il effectue la lecture ainsi que le calcul du checksum. Si la validation du checksum est positive, le contenu du buffer est copie dans la structure correspondant au message.
+
+
+	Voir Frederic Morin pour les details : frederic.morin.8@gmail.com
+ */
+
+
+#define SCPPARSER_OK	(0)
+#define SCPPARSER_ERROR	(1)
+
+#define UNKNOWN_MESSAGE_ID (-1)
+
+/** État du parseur **/
+enum {
+	LOOKING_FOR_KNOWN_MESSAGE_ID, //
+	RECEIVING_KNOWN_MESSAGE
+} state;
+
+
+void SCP_reset();
+void SCP_init();
+
+inline int SCP_get(void* dst, int len);
+
+
+uint8_t SCP_decode(const char data);
+uint8_t SCP_handle_completed_message();
+
+
+/** Doit retourner la longueur d'un message s'il est connu
+ ** @note Doit utiliser "id" pour déterminer la valeur de "bytes_to_read"
+ ** @return la longueur du payload du message ou -1 si le message n'existe pas
+ **/
+int8_t SCP_get_message_length(const uint8_t id);
+
+
+/** Doit traiter un payload de message complet et valide.
+ ** @note Les données à interpréter sont "id" pour l'identifiant et get() pour le contenu
+ **/
+//void SCP_process_complete_message(const uint8_t id);
+
+/** Fonction appelée pour récupérer le payload
+ ** @note L'appel ne s'effectue que si le message en buffer est valide
+ **/
+//inline int get(void* dst, int len) {
+//	memcpy(dst, buff + 1, len);
+//	return len;
+//}
+
+
+/*! Fonction qui sert a calcule combien de temps l'algorithme passe a traite les donnees en reception
+	    @return La somme de temps passe a recevoir depuis le dernier appel de cette fonction.
+ */
+inline uint32_t SCP_sum_time_receiving();
+
+int8_t get_message_length(const uint8_t id);
+
+#endif /* SCP_PARSER_H_ */
diff --git a/periph/gx3/SCP/sender.c b/periph/gx3/SCP/sender.c
new file mode 100644
index 0000000..f43d9a8
--- /dev/null
+++ b/periph/gx3/SCP/sender.c
@@ -0,0 +1,90 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * sender.c
+ *
+ *  Created on: Jan 18, 2014
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+
+
+#include "sender.h"
+#include "util.h"
+#include "endianess.h"
+#include "../../gx3.h"
+
+//uart_t _scp_uart;
+uint16_t bsdsum;
+
+SCP_sender_init(){
+	bsdsum = 0;
+
+}
+
+
+void SCP_send(const uint8_t data) {
+	bsdsum = crc16_byte(bsdsum, data);
+	GX3_send_request(&data, 1);
+}
+
+//void SCP_send_n(uint8_t nb, const uint8_t * data) {
+//	while (nb--)
+//		SCP_send(*data++);
+//}
+//
+//void SCP_send_32(const uint32_t data0) {
+//
+//	const uint32_t data = data0;
+////	host2bigendian(&data);
+//	uint8_t * pdata = (uint8_t *) &data;
+//	SCP_send(*pdata++);
+//	SCP_send(*pdata++);
+//	SCP_send(*pdata++);
+//	SCP_send(*pdata);
+//}
+//
+//void SCP_send_16(const uint16_t data0) {
+//	const uint16_t data = data0;
+////	host2bigendian(&data);
+//	uint8_t * pdata = (uint8_t *) &data;
+//	SCP_send(*pdata++);
+//	SCP_send(*pdata);
+//}
+//
+//void SCP_send_16n(uint8_t nb, const uint16_t * data) {
+//	uint16_t * pdata = (uint16_t *) data;
+//	while (nb--)
+//		SCP_send_16(*pdata++);
+//}
+//
+//void SCP_send_Bytes(const uint8_t * data) {
+//	while (*data)
+//		SCP_send(*data++);
+//}
+
+void SCP_send_float(const float data0) {
+	const float data = data0;
+	host2bigendian(&data);
+	uint8_t * pdata = (uint8_t*) &data;
+	SCP_send(*pdata++);
+	SCP_send(*pdata++);
+	SCP_send(*pdata++);
+	SCP_send(*pdata);
+}
+
+//void SCP_send_n_float(uint8_t nb, const float * data) {
+//	float * pdata = (float *) data;
+//	while (nb--)
+//		SCP_send_float(*pdata++);
+//}
diff --git a/periph/gx3/SCP/sender.h b/periph/gx3/SCP/sender.h
new file mode 100644
index 0000000..2cd1656
--- /dev/null
+++ b/periph/gx3/SCP/sender.h
@@ -0,0 +1,39 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * sender.h
+ *
+ *  Created on: Jan 18, 2014
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+#ifndef SENDER_H_
+#define SENDER_H_
+
+#include <stdint.h>
+#include "uart.h"
+
+void SCP_sender_init(uart_t uart);
+
+void SCP_send(const uint8_t data);
+void SCP_send_n(uint8_t nb, const uint8_t * data);
+void SCP_send_32(const uint32_t data0);
+void SCP_send_16(const uint16_t data0);
+void SCP_send_16n(uint8_t nb, const uint16_t * data);
+void SCP_send_Bytes(const uint8_t * data);
+
+void SCP_send_float(const float data0);
+
+void SCP_send_n_float(uint8_t nb, const float * data);
+
+#endif /* SENDER_H_ */
diff --git a/periph/gx3/SCP/util.c b/periph/gx3/SCP/util.c
new file mode 100644
index 0000000..dbc751d
--- /dev/null
+++ b/periph/gx3/SCP/util.c
@@ -0,0 +1,63 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * util.c
+ *
+ *  Created on: Jan 18, 2014
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+
+
+#include "util.h"
+
+uint16_t const crc16_table[256] = { //
+		//
+				0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241, //
+				0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440, //
+				0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40, //
+				0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841, //
+				0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40, //
+				0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41, //
+				0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641, //
+				0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040, //
+				0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240, //
+				0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441, //
+				0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41, //
+				0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840, //
+				0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41, //
+				0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40, //
+				0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640, //
+				0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041, //
+				0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240, //
+				0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441, //
+				0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41, //
+				0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840, //
+				0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41, //
+				0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40, //
+				0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640, //
+				0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041, //
+				0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241, //
+				0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440, //
+				0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40, //
+				0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841, //
+				0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40, //
+				0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41, //
+				0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641, //
+				0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040 };
+
+uint16_t crc16(uint16_t crc, uint8_t const *buffer, uint8_t len) {
+	while (len--)
+		crc = crc16_byte(crc, *buffer++);
+	return crc;
+}
diff --git a/periph/gx3/SCP/util.h b/periph/gx3/SCP/util.h
new file mode 100644
index 0000000..732a7dd
--- /dev/null
+++ b/periph/gx3/SCP/util.h
@@ -0,0 +1,42 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * util.h
+ *
+ *  Created on: Jan 18, 2014
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+#ifndef UTIL_H_
+#define UTIL_H_
+
+#include <stdint.h>
+
+/*! @class SCPUtil
+	@brief Classe qui gere le calcul du crc16 pour le module de communication
+
+	@defgroup SCPProtocol Dronolab - Protocole de communication
+    @brief Module de communication base sur l'algorithme scp avec crc16
+*/
+
+
+extern uint16_t const crc16_table[256];
+
+extern uint16_t crc16(uint16_t crc, const uint8_t *buffer, uint8_t len);
+
+static inline uint16_t crc16_byte(uint16_t crc, const uint8_t data) {
+	return (crc >> 8) ^ crc16_table[(crc ^ data) & 0xff];
+}
+
+
+#endif /* UTIL_H_ */
diff --git a/periph/gx3/gx3.c b/periph/gx3/gx3.c
new file mode 100644
index 0000000..18d04d1
--- /dev/null
+++ b/periph/gx3/gx3.c
@@ -0,0 +1,339 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * gx3.c
+ *
+ *  Created on: Nov 26, 2013
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+
+#include <stdint.h>
+#include <stdbool.h>
+#include <string.h>
+
+#include "gx3.h"
+#include "gx3_.h"
+#include "gx3_msg.h"
+
+#include "circular_buff.h"
+#include "SCP/scp_parser.h"
+#include "endianess.h"
+
+#include "sender.h"
+
+
+#define NO_DEBUG_HEADER
+#include "debug.h"
+#include "uart.h"
+#include "handler.h"
+
+#define GX3_TIME_CONVERT (0.000016f) //GX3 doc p.51 (1/62500)
+
+
+#include "FreeRTOS.h"
+#include "task.h"
+
+
+
+uart_t _gx3_uart;
+
+uint8_t gx3_alive_check;
+
+//Monitoring data
+uint32_t gx3_time_cmd_sent_us;
+
+uint32_t gx3_ang_cmd_sent_count;
+uint32_t gx3_ang_sum_time_reception_us;
+
+uint32_t gx3_acc_cmd_sent_count;
+uint32_t gx3_acc_sum_time_reception_us;
+
+bool is_gyro_calibration_completed;
+bool is_accel_calibration_sent;
+bool is_accel_calibration_completed;
+uint16_t accel_calibration_nb;
+
+circular_buff_t rx_buffer;
+
+void GX3_init(uart_t uart){
+
+	_gx3_uart = uart;
+
+	gx3_alive_check					= false;
+	gx3_time_cmd_sent_us			= 0;
+	gx3_ang_cmd_sent_count			= 0;
+	gx3_ang_sum_time_reception_us	= 0;
+	gx3_acc_cmd_sent_count			= 0;
+	gx3_acc_sum_time_reception_us	= 0;
+	is_gyro_calibration_completed	= false;
+	is_accel_calibration_sent		= false;
+	is_accel_calibration_completed	= false;
+	accel_calibration_nb			= 0;
+
+	SCP_init();
+
+	//initializing reception circular buffer
+	rx_buffer = cb_init();
+
+	//Setting reception handler used to decode
+	uart_set_rx_handler(_gx3_uart, GX3_rx_handler, NULL);
+
+
+
+	log_info("[GX3] instance created \n\r");
+}
+
+
+void GX3_rx_handler(handler_arg_t arg, uint8_t c)
+{
+	cb_write(&rx_buffer, &c);
+}
+
+void GX3_decode_uart_rx(void)
+{
+	uint8_t data=-1;
+	cb_read(&rx_buffer, &data);
+	if(data!=-1){
+		//		log_warning("0x%02x", data);
+		SCP_decode(data);
+	}
+}
+
+void GX3_send_request(uint8_t const *request, uint8_t size)
+{
+	uart_transfer(_gx3_uart, request, size);
+}
+
+
+/*
+ * rewrite in other class (generic) with switch case
+ *
+ * is_***_alive is a hack to speed up the protocol... => can be removed
+ */
+int8_t GX3_get_message_length(const uint8_t id)
+{
+	// payload size only
+	if(id == GX3_EULER_ANGLES_AND_ANGULAR_RATES_REQUEST[0])
+	{
+		return sizeof(gx3_euler_angles_and_angular_rates_response_t);
+	}
+	else if(id == GX3_ACCELERATIONS_AND_ANGULAR_RATES_REQUEST[0])
+	{
+		return sizeof(gx3_accelerations_and_angular_rates_response_t);
+	}
+	else if(!is_gyro_calibration_completed && id == GX3_CAPTURE_GYRO_BIAS[0])
+	{
+		return sizeof(gx3_capture_gyro_response_t);
+	}
+	else if(!is_accel_calibration_completed && id == GX3_WRITE_ACCEL_BIAS[0])
+	{
+		return sizeof(gx3_write_accel_response_t);
+	}
+	else if(!is_accel_calibration_completed && id == GX3_GET_NAME[0])
+	{
+		return sizeof(gx3_get_name_response_t);
+	}
+
+	return UNKNOWN_MESSAGE_ID;
+}
+
+void GX3_process_complete_message(const uint8_t id)
+{
+
+	if (id == GX3_EULER_ANGLES_AND_ANGULAR_RATES_REQUEST[0])
+	{
+		gx3_euler_angles_and_angular_rates_response_t r;
+
+
+		SCP_get(&r, sizeof(gx3_euler_angles_and_angular_rates_response_t));
+
+		//Writing ROLL, PITCH, YAW, DOT_ROLL, DOT_PITCH, DOT_YAW to "datastore"
+		bigendian2host(&(r.roll));	drone_gx3.roll	= r.roll;
+		bigendian2host(&(r.pitch));	drone_gx3.pitch	= r.pitch;
+		bigendian2host(&(r.yaw));	drone_gx3.yaw 	= r.yaw;
+
+		bigendian2host(&(r.dot_x));	drone_gx3.dot_roll	= r.dot_x;
+		bigendian2host(&(r.dot_y));	drone_gx3.dot_pitch	= r.dot_y;
+		bigendian2host(&(r.dot_z));	drone_gx3.dot_yaw		= r.dot_z;
+
+		//		Software killswtich
+		drone_gx3.imu_alive = true;
+		gx3_alive_check = 5;
+
+		//Monitoring
+		gx3_ang_cmd_sent_count++;
+		gx3_ang_sum_time_reception_us += (soft_timer_ticks_to_us(soft_timer_time()) - gx3_time_cmd_sent_us);
+
+	}
+	else if (id == GX3_ACCELERATIONS_AND_ANGULAR_RATES_REQUEST[0])
+	{
+
+		gx3_accelerations_and_angular_rates_response_t r;
+		SCP_get(&r, sizeof(gx3_accelerations_and_angular_rates_response_t));
+
+		if(is_accel_calibration_sent)
+		{
+			is_accel_calibration_sent = false;
+			accel_calibration_nb++;
+
+			// Writing ACCEL_BIAS_X, ACCEL_BIAS_Y, ACCEL_BIAS_Z to datastore
+			bigendian2host(&(r.accel_x));	drone_gx3.accel_bias_x += r.accel_x;
+			bigendian2host(&(r.accel_y));	drone_gx3.accel_bias_y += r.accel_y;
+			bigendian2host(&(r.accel_z));	drone_gx3.accel_bias_z += r.accel_z + 1.0f ;
+
+		}else{
+			// Writing ACCEL_X, ACCEL_Y, ACCEL_Z to datastore
+			bigendian2host(&(r.accel_x));	drone_gx3.accel_x = r.accel_x * PHYSICS_GX3;
+			bigendian2host(&(r.accel_y));	drone_gx3.accel_y = r.accel_y * PHYSICS_GX3;
+			bigendian2host(&(r.accel_z));	drone_gx3.accel_z = r.accel_z * PHYSICS_GX3;
+
+		}
+
+		//		KillSwtich
+		drone_gx3.imu_alive = true;
+		gx3_alive_check = 5;
+
+		//Monitoring
+		gx3_acc_cmd_sent_count++;
+		gx3_acc_sum_time_reception_us += (soft_timer_ticks_to_us(soft_timer_time()) - gx3_time_cmd_sent_us);
+
+		return;
+	}
+	else if(id == GX3_CAPTURE_GYRO_BIAS[0])
+	{
+		gx3_capture_gyro_response_t r;
+		SCP_get(&r, sizeof(gx3_capture_gyro_response_t));
+
+		// Writing GYRO_BIAS_X, GYRO_BIAS_Y, GYRO_BIAS_Z to Datastore
+		bigendian2host(&(r.gyro_bias_x));	drone_gx3.gyro_bias_x = r.gyro_bias_x;
+		bigendian2host(&(r.gyro_bias_y));	drone_gx3.gyro_bias_y = r.gyro_bias_y;
+		bigendian2host(&(r.gyro_bias_z));	drone_gx3.gyro_bias_z = r.gyro_bias_z;
+
+		//GX3 confirm that calibration is completed
+		is_gyro_calibration_completed = true;
+	}
+
+	else if(id == GX3_WRITE_ACCEL_BIAS[0])
+	{
+		gx3_write_accel_response_t r;
+		SCP_get(&r, sizeof(gx3_write_accel_response_t));
+
+		// Writing ACCEL_BIAS_X, ACCEL_BIAS_Y, ACCEL_BIAS_Z to Datastore
+		bigendian2host(&(r.accel_bias_x));	drone_gx3.accel_bias_x = r.accel_bias_x;
+		bigendian2host(&(r.accel_bias_y));	drone_gx3.accel_bias_y = r.accel_bias_y;
+		bigendian2host(&(r.accel_bias_z));	drone_gx3.accel_bias_z = r.accel_bias_z;
+
+		//GX3 confirm that calibration is completed
+		is_accel_calibration_completed = true;
+	}
+	else if(id == GX3_GET_NAME[0])
+	{
+		gx3_get_name_response_t r;
+		SCP_get(&r, sizeof(gx3_get_name_response_t));
+		int i=0;
+		for(i=0; i<sizeof(r.name); i++)
+			printf("[%c]", r.name[i]);
+		printf("\n");
+
+	}
+
+}
+
+void GX3_periodical(void *arg)
+{
+	while(1){
+		if(gx3_alive_check)
+			gx3_alive_check--;
+
+		else
+			drone_gx3.imu_alive = false;
+
+
+		GX3_send_request(GX3_EULER_ANGLES_AND_ANGULAR_RATES_REQUEST,
+				GX3_EULER_ANGLES_AND_ANGULAR_RATES_REQUEST_SIZE);
+
+		//Monitoring
+		gx3_time_cmd_sent_us = soft_timer_ticks_to_us(soft_timer_time());
+
+
+		/*** Critical pitch angles ***/
+		if (drone_gx3.pitch > 1.5f){
+			log_error("PITCH TOO HIGH");
+			drone_gx3.okToFly = false;
+		}
+		else if (drone_gx3.pitch < -1.5f){
+			log_error("PITCH TOO LOW");
+			drone_gx3.okToFly = false;
+		}
+
+		/*** Critical roll  angles ***/
+		else if (drone_gx3.roll > 1.5f){
+			log_error("ROLL TOO HIGH");
+			drone_gx3.okToFly = false;
+		}
+		else if (drone_gx3.roll < -1.5f){
+			log_error("ROLL TOO LOW");
+			drone_gx3.okToFly = false;
+		}
+		else
+			drone_gx3.okToFly = true;
+
+
+		vTaskDelay(arg);
+	}
+
+
+}
+
+void imu_decode_periodical(void *arg){
+
+	// arg is not used
+	(void) arg;
+
+	while (1){
+		GX3_decode_uart_rx();
+
+		//FIXME : repalce with vTaskDelay
+		//vTaskDelay(TASK_IMU_DECODE_PERIOD);
+		soft_timer_delay_us(5000/30);
+    }
+}
+
+
+
+//commented in initial code
+void GX3_write_bias()
+{
+	/*
+
+	GX3_send_request(GX3_WRITE_GYRO_BIAS, GX3_WRITE_GYRO_BIAS_SIZE);
+
+	SCP_send_float(0.0f);
+	SCP_send_float(0.0f);
+	SCP_send_float(0.0f);
+
+	is_gyro_calibration_completed  = true;
+
+
+
+	GX3_send_request(GX3_WRITE_ACCEL_BIAS, GX3_WRITE_ACCEL_BIAS_SIZE);
+	SCP_send_float(100.0f);
+	SCP_send_float(200.0f);
+	SCP_send_float(17.0f);
+	 */
+
+	//is_accel_calibration_sent	   = true;
+	//is_accel_calibration_completed = true;
+}
+
diff --git a/periph/gx3/gx3_.h b/periph/gx3/gx3_.h
new file mode 100644
index 0000000..3cbad19
--- /dev/null
+++ b/periph/gx3/gx3_.h
@@ -0,0 +1,34 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * gx3_.h
+ *
+ *  Created on: Jan 30, 2014
+ *      Author: liam <liambeguin.at.gmail.com>
+ */
+
+#ifndef GX3__H_
+#define GX3__H_
+
+
+#include <stdint.h>
+
+#include "handler.h"
+
+#include "GX3/gx3_msg.h"
+
+void GX3_rx_handler(handler_arg_t arg, uint8_t c);
+void GX3_decode_uart_rx(void);
+
+
+#endif /* GX3__H_ */
diff --git a/periph/gx3/gx3_msg.h b/periph/gx3/gx3_msg.h
new file mode 100644
index 0000000..4d496c1
--- /dev/null
+++ b/periph/gx3/gx3_msg.h
@@ -0,0 +1,150 @@
+/*
+ * This file is part of DronolabSTM32-embedded
+ *
+ * DronolabSTM32-embedded is a student project designed
+ * for flying drones.
+ *
+ * Go to < dronolab.etsmtl.ca > to find out more about
+ * the project
+ *
+ *
+ */
+
+/*
+ * gx3_msg.h
+ *
+ *  Created on: Nov 26, 2013
+ *      Author: liam <liambeguin.at.gmail.com>
+ *
+ *
+ *      Ref: http://files.microstrain.com/3DM-GX3-25%20Single%20Byte%20Data%20Communications%20Protocol.pdf
+ *
+ *      GX3 ENDIANESS : Big Endian
+ */
+
+#ifndef GX3_MSG_H_
+#define GX3_MSG_H_
+
+#define UNKNOWN_MESSAGE_ID (-1)
+
+#define GX3_GET_NAME_SIZE													2
+#define GX3_CAPTURE_GYRO_BIAS_SIZE 											5
+#define GX3_WRITE_ACCEL_BIAS_SIZE											3
+#define GX3_WRITE_GYRO_BIAS_SIZE 											3
+#define GX3_EULER_ANGLES_AND_ANGULAR_RATES_REQUEST_SIZE 					1
+#define GX3_ACCELERATIONS_AND_ANGULAR_RATES_REQUEST_SIZE 					1
+#define GX3_ORIENTATION_MATRIX_REQUEST_SIZE 								1
+#define GX3_ACCELERATION_ANGULAR_RATE_ORIENTATION_MATRIX_REQUEST_SIZE 		1
+#define GX3_SCALED_MAGNETOMETER_VECTOR_REQUEST_SIZE 						1
+#define GX3_EULER_ANGLES_REQUEST_SIZE 										1
+
+
+// Capture Gyro Bias
+static const uint8_t GX3_CAPTURE_GYRO_BIAS[] = {0xCD, 0xC1, 0x29, 0x27, 0x10};
+typedef struct {
+	float gyro_bias_x;
+	float gyro_bias_y;
+	float gyro_bias_z;
+	uint32_t timer;
+}gx3_capture_gyro_response_t;
+
+// Write Accel Bias
+static const uint8_t GX3_WRITE_ACCEL_BIAS[] = {0xC9, 0xB7, 0x44};
+typedef struct {
+	float accel_bias_x;
+	float accel_bias_y;
+	float accel_bias_z;
+	uint32_t timer;
+}gx3_write_accel_response_t;
+
+
+// Write Gyro Bias
+static const uint8_t GX3_WRITE_GYRO_BIAS[] = {0xCA, 0x12, 0xA5};
+typedef struct {
+	float gyro_bias_x;
+	float gyro_bias_y;
+	float gyro_bias_z;
+	uint32_t timer;
+}gx3_write_gyro_response_t;
+
+// GX3 request and response data structure
+static const uint8_t GX3_EULER_ANGLES_AND_ANGULAR_RATES_REQUEST[] = {0xCF};
+typedef struct {
+	float roll;
+	float pitch;
+	float yaw;
+	float dot_x; // roll
+	float dot_y; // pitch
+	float dot_z; // yaw
+	uint32_t timer;
+}gx3_euler_angles_and_angular_rates_response_t ;
+
+// GX3 request and response data structure
+static const uint8_t GX3_ACCELERATIONS_AND_ANGULAR_RATES_REQUEST[] = {0xC2};
+typedef struct {
+	float accel_x;
+	float accel_y;
+	float accel_z;
+	float dot_x; // vit roll
+	float dot_y; // vit pitch
+	float dot_z; // vit yaw
+	uint32_t timer;
+}gx3_accelerations_and_angular_rates_response_t;
+
+static const uint8_t GX3_ORIENTATION_MATRIX_REQUEST[] = {0xC5};
+typedef struct {
+	float m11;
+	float m12;
+	float m13;
+	float m21;
+	float m22;
+	float m23;
+	float m31;
+	float m32;
+	float m33;
+	uint32_t timer;
+}gx3_orientation_matrix_response_t;
+
+static const uint8_t GX3_ACCELERATION_ANGULAR_RATE_ORIENTATION_MATRIX_REQUEST[] = {0xC8};
+typedef struct {
+	float accel_x;
+	float accel_y;
+	float accel_z;
+	float dot_x; // roll
+	float dot_y; // pitch
+	float dot_z; // yaw
+	float m11;
+	float m12;
+	float m13;
+	float m21;
+	float m22;
+	float m23;
+	float m31;
+	float m32;
+	float m33;
+	uint32_t timer;
+}gx3_acceleration_angular_rate_orientation_matrix_response_t ;
+
+static const uint8_t GX3_SCALED_MAGNETOMETER_VECTOR_REQUEST[] = {0xC7};
+typedef struct {
+	float mag_x;
+	float mag_y;
+	float mag_z;
+	uint32_t timer;
+}gx3_scaled_magnetometer_vector_t;
+
+static const uint8_t GX3_EULER_ANGLES_REQUEST[] = {0xCE};
+typedef struct {
+	float roll;
+	float pitch;
+	float yaw;
+	uint32_t timer;
+}gx3_euler_angles_response_t;
+
+static const uint8_t GX3_GET_NAME[] = {0xEA, 0x02};
+typedef struct {
+	uint8_t echo;
+	char name[16];
+}gx3_get_name_response_t ;
+
+#endif /* GX3_MSG_H_ */
