diff --git a/lib/hush.h b/lib/hush.h
new file mode 100644
index 0000000..7ce3668
--- /dev/null
+++ b/lib/hush.h
@@ -0,0 +1,9 @@
+
+#ifndef HUSH_H_
+#define HUSH_H_
+
+#include "uart.h"
+
+void hush_init (uart_t uart);
+
+#endif /* HUSH_H_ */
diff --git a/lib/hush/_commands.c b/lib/hush/_commands.c
new file mode 100644
index 0000000..754f3a8
--- /dev/null
+++ b/lib/hush/_commands.c
@@ -0,0 +1,156 @@
+#include "platform.h"
+#include "printf.h"
+#include "nvic.h"
+#include "printf.h"
+#define NO_DEBUG_HEADER
+#include "debug.h"
+#include <string.h>
+#include <stdlib.h>
+#include "_commands.h"
+
+#include "tlc59116.h"
+
+#define INPUT_MAX_ARGS 8
+cmd_entry_t commands[] = {
+	SHELL_CMD(help, "help ............ Display this message", \
+"  help           - print brief description of all commands"),
+	SHELL_CMD(version, "version ......... Print shell version", "  version"),
+	SHELL_CMD(echo, "echo ............ echo args to console", \
+"  echo [args...]     - echo args to console"),
+	SHELL_CMD(leds,			"leds ............ Control GPIO leds", \
+"  leds mask <on|off|toggle>     - set leds depending on mask"),
+	SHELL_CMD(rgb, "rgb ............. Control RGB  leds", \
+"  rgb id red green blue     - set red, green, blue on id rgb LED\n\
+  rgb id color              - set id rgb LED to color. \n\
+                              color can be off, white, red, green, blue,\n\
+                              purple,orange,yellow"),
+  SHELL_CMD(reset,    "reset ........... Perform a system reset", "  reset"),
+	/* the following should always be at the end */
+	SHELL_CMD(not_found, NULL, NULL),
+};
+
+void print_usage (cmd_entry_t *command) {
+	if (command->usage != NULL && command->help != NULL)
+	  printf ("%s\n\nUsage : \n%s\n\n", command->usage, command->help);
+}
+
+cmd_entry_t *find_cmd (const char * command) {
+
+	uint8_t i = 0;
+	while (commands[i].usage != NULL) {
+		if (!strcmp(command, commands[i].name)) break ;
+		else i++;
+	}
+	return  &commands[i];
+}
+
+uint8_t do_help (uint8_t argc, char * const argv[]){
+
+	uint8_t i = 0;
+	cmd_entry_t *ret;
+
+	if (argc < 2) {
+		printf ("\n USAGE                DESCRIPTION\n");
+		while ( strcmp(commands[i].name, "not_found")) {
+			printf ("%s\n", commands[i].usage);
+			i++;
+		}
+	} else {
+		for (i=1; i<argc; i++) {
+			ret = find_cmd (argv[i]);
+			if (ret->usage != NULL) print_usage (ret);
+			else (ret->function)(argc, argv);
+		}
+	}
+	return 0;
+}
+
+uint8_t do_version (uint8_t argc, char * const argv[]){
+	printf("Dronolab's hush Shell, Version 0.1.0\nLiam BEGUIN\n");
+	return 0;
+}
+
+uint8_t do_echo (uint8_t argc, char * const argv[]){
+	uint8_t i;
+	for (i=1; i<argc; i++)
+		if (argv[i] != NULL)
+			printf("%s ", argv[i]);
+
+	printf("\n");
+	return 0;
+}
+
+uint8_t do_leds (uint8_t argc, char *const argv[]) {
+
+	if (argv[1] == NULL || argv[2] == NULL)
+		return 1;
+	if (!strcmp(argv[2], "on"))
+		leds_on(atoi(argv[1]));
+
+	else if (!strcmp(argv[2], "off"))
+		leds_off(atoi(argv[1]));
+
+	else if (!strcmp(argv[2], "toggle"))
+		leds_toggle(atoi(argv[1]));
+
+	else
+		return -1;
+
+	return 0;
+}
+
+uint8_t do_rgb (uint8_t argc, char *const argv[]) {
+
+	if (argc == 5) {
+		tlc59116_color_t color = {atoi(argv[2]), atoi(argv[3]), atoi(argv[4])};
+		tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), color);
+	} else if (argc == 3) {
+		if (!strcmp(argv[2], "off"))
+			tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), RGB_OFF);
+		else if (!strcmp(argv[2], "white"))
+			tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), RGB_WHITE);
+		else if (!strcmp(argv[2], "red"))
+			tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), RGB_RED);
+		else if (!strcmp(argv[2], "green"))
+			tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), RGB_GREEN);
+		else if (!strcmp(argv[2], "blue"))
+			tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), RGB_BLUE);
+		else if (!strcmp(argv[2], "purple"))
+			tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), RGB_PURPLE);
+		else if (!strcmp(argv[2], "orange"))
+			tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), RGB_ORANGE);
+		else if (!strcmp(argv[2], "yellow"))
+			tlc59116_set_led_color((tlc59116_led_t)atoi(argv[1]), RGB_YELLOW);
+		else {
+			printf (" ** Unsupported color %s **\n", argv[2]);
+			return 1;
+		}
+	} else {
+		return 1;
+	}
+
+	return 0;
+
+}
+
+uint8_t do_reset (uint8_t argc, char * const argv[]){
+
+	NVIC_RESET();
+}
+
+uint8_t do_not_found (uint8_t argc, char * const argv[]){
+
+	if (!strcmp(argv[0], "?")) {
+		do_help(argc, argv);
+		return 0;
+	}
+
+	printf ("** Unknown command: %s (try 'help') **\n", argv[0]);
+	return 0;
+}
+
+
+
+
+
+
diff --git a/lib/hush/_commands.h b/lib/hush/_commands.h
new file mode 100644
index 0000000..c4766f1
--- /dev/null
+++ b/lib/hush/_commands.h
@@ -0,0 +1,34 @@
+#ifndef _COMMANDS_H_
+#define _COMMANDS_H_
+
+#include "stdint.h"
+
+// This generates the function prototypes
+#define MK_CMD(x) uint8_t do_ ## x (uint8_t argc, char * const argv[])
+// This constructs the command entry
+#define SHELL_CMD(name, usage, help) {#name,do_ ## name, usage, help}
+
+// function return code
+// 	* 0 all good
+// 	* 1 usage
+// 	* ... (others)
+typedef struct {
+	const char *name;
+	uint8_t (*function) (uint8_t argc, char * const argv[]);
+	const char *usage;
+	const char *help;
+}cmd_entry_t;
+
+MK_CMD(version);
+MK_CMD(echo);
+MK_CMD(help);
+MK_CMD(leds);
+MK_CMD(rgb);
+MK_CMD(reset);
+MK_CMD(not_found);
+
+extern cmd_entry_t commands[];
+
+cmd_entry_t *find_cmd (const char * command);
+
+#endif /* _COMMANDS_H_ */
diff --git a/lib/hush/hush.c b/lib/hush/hush.c
new file mode 100644
index 0000000..3b29f90
--- /dev/null
+++ b/lib/hush/hush.c
@@ -0,0 +1,189 @@
+/*
+ * hush.c
+ *
+ *  Created on : Sun Apr 19 15:55:11 EDT 2015
+ * 		  Author : Liam BEGUIN
+ *
+ * 		  Interesting sources of info:
+ * 			 * http://fundamental-code.com/interp/
+ */
+
+#include "uart.h"
+#include "soft_timer.h"
+#include "printf.h"
+#include "event.h"
+#include "hush.h"
+#include "_commands.h"
+#include <string.h>
+#define NO_DEBUG_HEADER
+#include "debug.h"
+
+#define INPUT_MAX_SIZE 128
+#define INPUT_MAX_ARGS 8
+#define MAX_ARG_SIZE INPUT_MAX_SIZE/INPUT_MAX_ARGS
+#define PROMPT "#/ "
+#define isblank(c)     (c == ' ' || c == '\t')
+#define beep()				 printf("\a")
+
+/*commandline definitions*/
+char input_line[INPUT_MAX_SIZE];
+uint8_t input_buf_position = 0;
+uint8_t input_ready = 1;
+char *argument_list[INPUT_MAX_ARGS + 1] = {0};
+
+void print_prompt(void)
+{
+	printf(PROMPT);
+}
+
+void print_welcome(void)
+{
+	soft_timer_delay_ms(10);
+	printf("\n \
+                ._,.\n \
+           \"..-..pf.\n \
+          -L   ..#'\n \
+        .+_L  .\"]#\n \
+        ,'j' .+.j`                 -'.__..,.,p.\n \
+       _~ #..<..0.                 .J-.``..._f.\n \
+      .7..#_.. _f.                .....-..,`4'\n \
+      ;` ,#j.  T'      ..         ..J....,'.j`\n \
+     .` ..\"^.,-0.,,,,yMMMMM,.    ,-.J...+`.j@\n \
+    .'.`...' .yMMMMM0M@^=`\"\"g.. .'..J..\".'.jH\n \
+    j' .'1`  q'^)@@#\"^\".`\"='BNg_...,]_)'...0-\n \
+   .T ...I. j\"    .'..+,_.'3#MMM0MggCBf....F.\n \
+   j/.+'.{..+       `^~'-^~~\"\"\"\"'\"\"\"?\'\"``'1`\n \
+   .... .y.}                  `.._-:`_...jf\n \
+   g-.  .Lg'                 ..,..'-....,'.\n \
+  .'.   .Y^                  .....',].._f\n \
+  ......-f.                 .-,,.,.-:--&`\n \
+                            .`...'..`_J`\n \
+                            .~......'#'\n \
+                            '..,,.,_]`\n \
+                            .L..`...\n\n");
+	printf("type '?' or 'help' for more informations\n");
+	print_prompt();
+}
+
+static uint8_t parse_line(char *line, char *argv[])
+{
+	uint8_t nargs = 0;
+	while (nargs < INPUT_MAX_ARGS ) {
+
+		/* skip any white spaces */
+		while (isblank(*line))
+			++line;
+
+		/* end of line, no more args */
+		if (*line == '\0') {
+			argv[nargs] = NULL;
+			return nargs;
+		}
+
+		argv[nargs++] = line; /* begin of argument string */
+
+		/* find end of string */
+		while (*line && !isblank(*line))
+			++line;
+
+
+		if (*line == '\0') { /* end of line, no more args  */
+			argv[nargs] = NULL;
+			return nargs;
+		}
+
+		*line++ = '\0'; /* terminate current arg   */
+	}
+	printf("** Too Many args (max. %d) **", INPUT_MAX_ARGS);
+	return nargs;
+}
+
+static void process_command(handler_arg_t arg)
+{
+	uint8_t nargs = 0;
+	cmd_entry_t *ret;
+	printf("\n");
+
+
+	nargs = parse_line(input_line, argument_list);
+
+	// Searching the right command and executing...
+	ret = find_cmd (argument_list[0]);
+	(ret->function)(nargs, argument_list);
+
+	// flushing the argument buffer
+	memset(argument_list, '\0', sizeof(argument_list));
+
+	input_ready = 1;
+	print_prompt();
+}
+
+static void readline(handler_arg_t arg, uint8_t c)
+{
+	static uint8_t skip = 0;
+	if (input_ready && (input_buf_position >= 0) \
+			            && (input_buf_position <= INPUT_MAX_SIZE) ) {
+
+		/* if almost full exit */
+		if (input_buf_position == INPUT_MAX_SIZE -1 && c != '\n') {
+			beep();
+			printf("\n** Too long ! try again (max. %d) **", INPUT_MAX_SIZE);
+			input_line[input_buf_position] = '\0';
+			input_buf_position = 0;
+			printf("\n");
+			print_prompt();
+			return;
+		}
+
+		if (skip) {
+			skip--;
+			return;
+		}
+
+		switch (c) {
+		case '\r':
+		case '\n':
+			if (input_buf_position > 0) {
+ 				input_ready = 0;
+				input_line[input_buf_position] = '\0';
+				input_buf_position = 0;
+				event_post_from_isr(EVENT_QUEUE_APPLI, process_command, NULL);
+			} else {
+				printf("\n");
+				print_prompt();
+			}
+			break;
+		case '\t': // This could be used for auto completion...
+		case '~':
+			break;
+		case 0x7F: // Backspace
+			if (input_buf_position > 0) {
+				input_buf_position--;
+				printf("\b \b");
+			} else {
+				beep();
+			}
+			break;
+		case 0x03:
+			printf("^C\n");
+			print_prompt();
+			input_buf_position = 0;
+			break;
+		case 0x1B:
+			// skip Escape character and other
+			// charracters comming after (eg. [A, [B, [C, [D)
+			skip = 2;
+			break;
+		default:
+			printf("%c", c);
+			input_line[input_buf_position++] = (char) c;
+			break;
+		}
+	}
+}
+
+void hush_init(uart_t uart)
+{
+	uart_set_rx_handler(uart, readline, NULL);
+	event_post(EVENT_QUEUE_APPLI, (handler_t) print_welcome, NULL);
+}
