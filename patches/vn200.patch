diff --git a/periph/vn200.h b/periph/vn200.h
new file mode 100644
index 0000000..8ba3c67
--- /dev/null
+++ b/periph/vn200.h
@@ -0,0 +1,31 @@
+#include "uart.h"
+
+#define PARSER_BUFFER_SIZE 256
+
+typedef enum {
+	// Configuration registers
+	USERTAG,
+	MODEL_NUMBER,
+	HARDWARE_REV,
+	SERIAL_NUMBER,
+	FW_VERSION,
+	SERIAL_BAUDRATE,
+	ASYNC_DATA_OUTPUT_TYPE,
+	ASYNC_DATA_OUTPUT_FREQ,
+
+	// Measurement registers
+	YAW_PITCH_ROLL
+} vn200_regID_t;
+
+void vn200_init(uart_t uart);
+uint8_t* vn200_getModel (void);
+void vn200_decodeUartRx (void);
+void vn200_getReg(vn200_regID_t regID);
+void vn200_sendRequest(uint8_t const *request, uint8_t size);
+
+typedef struct {
+
+}vn200_t;
+
+/* VN200 Datastore*/
+vn200_t IMU;
diff --git a/periph/vn200/vn200.c b/periph/vn200/vn200.c
new file mode 100644
index 0000000..b5ab83d
--- /dev/null
+++ b/periph/vn200/vn200.c
@@ -0,0 +1,132 @@
+#include <stdlib.h>
+#include <string.h>
+
+#include "platform.h"
+#include "uart.h"
+#include "debug.h"
+
+#include "vn200.h"
+#include "vn200_commands.h"
+#include "soft_timer.h"
+
+#define VN200_INPUT_MAX_SIZE 128
+#define VN200_INPUT_MAX_ARGS 8
+#define VN200_MAX_ARG_SIZE VN200_INPUT_MAX_SIZE/VN200_INPUT_MAX_ARGS
+#define iscomma(c)     (c == ',')
+
+/*commandline definitions*/
+char input_line[VN200_INPUT_MAX_SIZE];
+uint8_t vn200_input_buf_position = 0;
+uint8_t vn200_input_ready = 1;
+char *vn200_argument_list[VN200_INPUT_MAX_ARGS + 1] = {0};
+
+/* global declaration used in this file */
+uart_t _vn200_uart;
+
+
+// Calculates the 8-bit checksum for the given byte sequence.
+uint8_t calculateChecksum(uint8_t data[], uint8_t length)
+{
+	uint8_t i, cksum = 0;
+
+	for(i=0; i<length; i++)
+		cksum ^= data[i];
+
+	return cksum;
+}
+
+static uint8_t vn200_parse_line(char *line, char *argv[])
+{
+	uint8_t nargs = 0;
+	while (nargs < VN200_INPUT_MAX_ARGS ) {
+
+		/* end of line, no more args */
+		if (*line == '\0'){
+			argv[nargs] = NULL;
+			return nargs;
+		}
+
+		argv[nargs++] = line; /* begin of argument string */
+
+		/* find end of string */
+		while (*line && !iscomma(*line) && *line != '*')
+			++line;
+
+		if (*line == '\0'){ /* end of line, no more args  */
+			argv[nargs] = NULL;
+			return nargs;
+		}
+
+		*line++ = '\0'; /* terminate current arg   */
+	}
+	printf("** Too Many args (max. %d) **", VN200_INPUT_MAX_ARGS);
+	return nargs;
+}
+
+static void process_line(handler_arg_t arg)
+{
+	uint8_t nargs = 0;
+	vn200_cmd_t *ret;
+
+	nargs = vn200_parse_line (input_line, vn200_argument_list);
+
+	// Searching the right command and executing...
+	ret = vn200_find_cmd (vn200_argument_list[0]);
+	(ret->function)(nargs, vn200_argument_list);
+
+	// flushing
+	memset (vn200_argument_list, '\0', sizeof(vn200_argument_list));
+
+	vn200_input_ready = 1;
+}
+
+void vn200_readline(handler_arg_t arg, uint8_t c)
+{
+	if (vn200_input_ready) {
+		switch (c) {
+		case '\r':
+		case '\n':
+			if (vn200_input_buf_position > 0) {
+				vn200_input_ready = 0;
+				input_line[vn200_input_buf_position] = '\0';
+				vn200_input_buf_position = 0;
+				event_post_from_isr(EVENT_QUEUE_APPLI, process_line, NULL);
+			}
+			break;
+		default:
+			input_line[vn200_input_buf_position++] = (char) c;
+			break;
+		}
+	}else{
+		log_error ("Not ready !");
+	}
+}
+
+
+void vn200_sendRequest(uint8_t const *request, uint8_t size)
+{
+	uart_transfer(_vn200_uart, request, size);
+	soft_timer_delay_ms(1);
+}
+
+void vn200_getReg(vn200_regID_t regID)
+{
+	uint8_t request[20], tmp[20];
+	uint8_t chksum;
+
+	sprintf((char*)tmp, "VNRRG,%02d", regID);
+	chksum = calculateChecksum(tmp, 8);
+	sprintf((char*)request, "$%s*%x\r\n", tmp, chksum);
+
+	vn200_sendRequest(request, sizeof(request));
+}
+
+
+void vn200_init(uart_t uart)
+{
+	_vn200_uart = uart;
+	vn200_sendRequest ((uint8_t*)"$VNRRG,01*XX\r\n", 13);
+
+	uart_set_rx_handler(uart, vn200_readline, NULL);
+}
+
diff --git a/periph/vn200/vn200_commands.c b/periph/vn200/vn200_commands.c
new file mode 100644
index 0000000..7909139
--- /dev/null
+++ b/periph/vn200/vn200_commands.c
@@ -0,0 +1,90 @@
+#include "platform.h"
+#include "printf.h"
+#include "debug.h"
+#include <string.h>
+#include <stdlib.h>
+
+#include "vn200_commands.h"
+
+uint8_t vn200_readReg (uint8_t argc, char * const argv[]);
+uint8_t vn200_processErr (uint8_t argc, char * const argv[]);
+
+vn200_cmd_t vn200_cmds[] = {
+	{"$VNRRG", vn200_readReg },
+	{"$VNWRG", NULL},
+	{"$VNERR", vn200_processErr},
+	/* */
+	{NULL, NULL},
+};
+
+vn200_cmd_t *vn200_find_cmd (const char * command) {
+
+	uint8_t i = 0;
+	while (vn200_cmds[i].name != NULL) {
+		if (!strcmp(command, vn200_cmds[i].name)) break ;
+		else i++;
+	}
+	return  &vn200_cmds[i];
+}
+
+uint8_t vn200_readReg (uint8_t argc, char * const argv[]){
+
+	switch (atoi(argv[1])) {
+		case 1:
+			printf ("[ %d ] %s initialized ! \n",
+					soft_timer_ticks_to_ms(soft_timer_time()), argv[2]);
+			break;
+		default:
+			printf("reading reg%d : %s \n", atoi(argv[1]), argv[2]);
+			break;
+		}
+	return 0;
+}
+
+uint8_t vn200_processErr (uint8_t argc, char * const argv[]){
+	switch (atoi(argv[1])) {
+		case 1:
+			log_error("[VN200] HardFault");
+			break;
+		case 2:
+			log_error("[VN200] Serial Buffer Overflow");
+			break;
+		case 3:
+			log_error("[VN200] Invalid CheckSum");
+			break;
+		case 4:
+			log_error("[VN200] Invalid Command");
+			break;
+		case 5:
+			log_error("[VN200] Not Enough Parameters");
+			break;
+		case 6:
+			log_error("[VN200] Too Many Parameters");
+			break;
+		case 7:
+			log_error("[VN200] Invalid Parameter");
+			break;
+		case 8:
+			log_error("[VN200] Invalid Register");
+			break;
+		case 9:
+			log_error("[VN200] Unauthorized Access");
+			break;
+		case 10:
+			log_error("[VN200] Watchdog Reset");
+			break;
+		case 11:
+			log_error("[VN200] Output Buffer Overflow");
+			break;
+		case 12:
+			log_error("[VN200] Insufficient Baudrate");
+			break;
+		case 255:
+			log_error("[VN200] Error Buffer Overflow");
+			break;
+		default:
+			log_error("[VN200] Unknown Error ...");
+			break;
+	}
+	return 0;
+}
diff --git a/periph/vn200/vn200_commands.h b/periph/vn200/vn200_commands.h
new file mode 100644
index 0000000..3e492cd
--- /dev/null
+++ b/periph/vn200/vn200_commands.h
@@ -0,0 +1,14 @@
+#ifndef _VN200_COMMANDS_H_
+#define _VN200_COMMANDS_H_
+
+#include <stdint.h>
+
+typedef struct {
+	const char *name;
+	uint8_t (*function) (uint8_t argc, char * const argv[]);
+}vn200_cmd_t;
+
+extern vn200_cmd_t vn200_cmds[];
+vn200_cmd_t *vn200_find_cmd (const char * command);
+
+#endif /* _VN200_COMMANDS_H_ */
